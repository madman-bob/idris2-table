. ../testutils.sh

basicTest ExampleTables.idr << EOF
    employees
    moreEmployees

    :let allEmployees : Table EmployeeSchema
    :let allEmployees = employees ++ moreEmployees
    allEmployees

    mkTable $ the (List _) [robinson, smith, williams]
    mkTable $ the (SnocList _) [<robinson, smith, williams]
    mkTable $ the (Maybe _) (Just robinson)

    employees ++ the (List _) [robinson, smith, williams]
    employees ++ the (SnocList _) [<robinson, smith, williams]
    employees ++ the (Maybe _) (Just robinson)

    employees |+| [<sales, finance, production]
    employees |+| [<sales, finance]

    employees |*| [<sales, finance]

    the (SnocList _) $ map (value "Last Name") allEmployees
    the (Table _) $ map (updateField "Department ID" $ maybe 30 id) allEmployees

    toSnocList allEmployees

    elemBy sameDepartment [<"Unknown", Just 34] employees
    elemBy sameDepartment [<"Unknown", Just 34] allEmployees
    elem robinson employees
    elem robinson allEmployees

    map displayName allEmployees
    foldr (\rec => \case "" => displayName rec; x => "\{displayName rec}, \{x}") (the String "") allEmployees

    distinctBy sameDepartment $ allEmployees ++ allEmployees
    distinct $ allEmployees ++ allEmployees

    mapFst finToNat <$> enum allEmployees

    finToNat <$> findIndexBy ((== Just 32) . value "Department ID") allEmployees
    finToNat <$> findIndexBy ((== Just 35) . value "Department ID") allEmployees

    finToNat <$> findIndex robinson allEmployees
    finToNat <$> findIndex robinson employees

    sort allEmployees
    sort @{byField "Department ID"} allEmployees

    filter hasDepartment allEmployees
    dropNa "Department ID" allEmployees

    row employees 0
    row employees 1
    row employees 2
    row employees 3

    dropRows employees 0
    dropRows employees 1
    dropRows employees 2
    dropRows employees 3
    dropRows employees 4

    init employees 0
    init employees 1
    init employees 2
    init employees 3
    init employees 4
EOF

b2t2Test ExampleTables.idr << 'EOF'
    SortedMap.toList $ map average $ groupBy (colorWarmth . value "favorite color") (length . value "name") students

    SortedMap.toList $ groupBy (mFloor 5 . value "age") (value "name") students
    SortedMap.toList $ groupBy (mFloor 5 . value "final") (value "name") gradebook
    SortedMap.toList $ group "favorite color" students
    SortedMap.toList $ group "age" gradebook
    SortedMap.toList $ groupMany [<"red", "black"] jellyNamed
    SortedMap.toList $ groupKeepKey "favorite color" students
    SortedMap.toList $ groupKeepKey "age" gradebook
    SortedMap.toList $ groupManyKeepKeys [<"red", "black"] jellyNamed

    SortedMap.toList $ countBy (mFloor 5 . value "age") students
    SortedMap.toList $ countBy (mFloor 5 . value "final") gradebook
    SortedMap.toList $ count "favorite color" students
    SortedMap.toList $ count "age" gradebook

    :let studentsPivot : Table [<"favorite color" :! String, "age-average" :! Double]
    :let studentsPivot = pivot [<"favorite color"] [<"age" ~> "age-average" $$= average] students
    studentsPivot

    :let jellyPivot : Table [<"get acne" :! Bool, "brown" :! Bool, "red proportion" :! Double, "pink proportion" :! Double]
    :let jellyPivot = pivot [<"get acne", "brown"] [<"red" ~> "red proportion" $$= average . map cast, "pink" ~> "pink proportion"  $$= average . map cast] jellyNamed
    jellyPivot

    the (Table [<"name" :! String, "age" :! Nat, "quizzes" :! Nat, "midterm" :! Nat, "final" :! Nat]) $ flatten [<"quizzes"] gradebookSeq
    the (Table [<"name" :! String, "age" :! Nat, "quizzes" :! Nat, "midterm" :! Nat, "final" :! Nat, "quiz-pass?" :! Bool]) $ flatten [<"quizzes", "quiz-pass?"] $ buildColumn "quiz-pass?" (map (>= 8) . value "quizzes") gradebookSeq
EOF
