. ../testutils.sh

basicTest ExampleTables.idr << EOF
    show employees
    show moreEmployees

    :let allEmployees : Table EmployeeSchema
    :let allEmployees = employees ++ moreEmployees
    show allEmployees

    show $ mkTable $ the (List _) [robinson, smith, williams]
    show $ mkTable $ the (SnocList _) [<robinson, smith, williams]
    show $ mkTable $ the (Maybe _) (Just robinson)

    show $ employees ++ the (List _) [robinson, smith, williams]
    show $ employees ++ the (SnocList _) [<robinson, smith, williams]
    show $ employees ++ the (Maybe _) (Just robinson)

    toSnocList allEmployees

    elemBy sameDepartment [<"Unknown", Just 34] employees
    elemBy sameDepartment [<"Unknown", Just 34] allEmployees
    elem robinson employees
    elem robinson allEmployees

    map displayName allEmployees
    foldr (\rec => \case "" => displayName rec; x => "\{displayName rec}, \{x}") (the String "") allEmployees

    show $ distinctBy sameDepartment $ allEmployees ++ allEmployees
    show $ distinct $ allEmployees ++ allEmployees

    show $ sort allEmployees
    show $ sort @{byField "Department ID"} allEmployees

    show $ filter hasDepartment allEmployees

    row employees 0
    row employees 1
    row employees 2
    row employees 3

    show $ dropRows employees 0
    show $ dropRows employees 1
    show $ dropRows employees 2
    show $ dropRows employees 3
    show $ dropRows employees 4

    show $ init employees 0
    show $ init employees 1
    show $ init employees 2
    show $ init employees 3
    show $ init employees 4
EOF

b2t2Test ExampleTables.idr << EOF
    SortedMap.toList $ map average $ groupBy (colorWarmth . value "favorite color") (length . value "name") students

    SortedMap.toList $ groupBy (mFloor 5 . value "age") (value "name") students
    SortedMap.toList $ groupBy (mFloor 5 . value "final") (value "name") gradebook
    SortedMap.toList $ group "favorite color" students
    SortedMap.toList $ group "age" gradebook
    SortedMap.toList $ groupKeepKey "favorite color" students
    SortedMap.toList $ groupKeepKey "age" gradebook

    SortedMap.toList $ countBy (mFloor 5 . value "age") students
    SortedMap.toList $ countBy (mFloor 5 . value "final") gradebook
    SortedMap.toList $ count "favorite color" students
    SortedMap.toList $ count "age" gradebook
EOF
